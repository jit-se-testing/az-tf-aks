name: Create TF State Infrastructure - ID: ${{ github.run_id }}

on:
  workflow_dispatch:
    inputs:
      confirm_create:
        description: 'Type YES to confirm create action - Creates Resource Group, Storage Account, and Container for Terraform state management'
        required: false
        default: ''

jobs:
  plan:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Clean .terraform directory
        working-directory: backend-bootstrap
        run: rm -rf .terraform
      - name: Print working directory
        run: pwd
        working-directory: backend-bootstrap
      - name: List files
        run: ls -l
        working-directory: backend-bootstrap
      - name: Check if storage account exists
        id: check-storage
        run: |
          if az storage account show --name "${{ secrets.BACKEND_STORAGE_ACCOUNT || 'akstfstate01' }}" --resource-group "${{ secrets.BACKEND_RESOURCE_GROUP || 'jit-se-testing-aks-tfstate-rg01' }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug - Show storage account check result
        run: |
          echo "Storage account exists: ${{ steps.check-storage.outputs.exists }}"
      - name: Terraform Init (Local State)
        if: steps.check-storage.outputs.exists == 'false'
        working-directory: backend-bootstrap
        timeout-minutes: 10
        run: |
          echo "Starting terraform init with local state (first run)..."
          # Remove backend block for first run
          sed -i '/backend "azurerm" {/,/}/d' main.tf
          terraform init -upgrade -input=false
          echo "Terraform init completed successfully"
      - name: Terraform Init (Remote State)
        if: steps.check-storage.outputs.exists == 'true'
        working-directory: backend-bootstrap
        timeout-minutes: 10
        run: |
          echo "Starting terraform init with remote state..."
          terraform init -upgrade \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP || 'jit-se-testing-aks-tfstate-rg01' }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT || 'akstfstate01' }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER || 'tfstate' }}" \
            -backend-config="key=backend-bootstrap.tfstate"
          echo "Terraform init with remote state completed successfully"
      - name: Select workspace
        working-directory: backend-bootstrap
        run: terraform workspace select default || terraform workspace new default
      - name: Debug - Show current workspace
        working-directory: backend-bootstrap
        run: terraform workspace show
      - name: Debug - List state resources
        working-directory: backend-bootstrap
        run: |
          if terraform state list 2>/dev/null; then
            echo "State file exists and contains resources"
          else
            echo "No state file found or state file is empty (this is normal for first run)"
          fi
      - name: Debug - Show backend config
        working-directory: backend-bootstrap
        run: |
          if terraform show -json 2>/dev/null | jq '.values.root_module.resources[].address' 2>/dev/null; then
            echo "Resources found in state"
          else
            echo "No resources in state (this is normal for first run)"
          fi
      - name: Terraform Plan
        working-directory: backend-bootstrap
        run: terraform plan
  apply:
    needs: plan
    runs-on: ubuntu-latest
    environment:
      name: manual-approval
    env:
      ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - name: Check if storage account exists
        id: check-storage
        run: |
          if az storage account show --name "${{ secrets.BACKEND_STORAGE_ACCOUNT || 'akstfstate01' }}" --resource-group "${{ secrets.BACKEND_RESOURCE_GROUP || 'jit-se-testing-aks-tfstate-rg01' }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug - Show storage account check result
        run: |
          echo "Storage account exists: ${{ steps.check-storage.outputs.exists }}"
      - name: Terraform Init (Local State)
        if: steps.check-storage.outputs.exists == 'false'
        working-directory: backend-bootstrap
        timeout-minutes: 10
        run: |
          echo "Starting terraform init with local state (first run)..."
          # Remove backend block for first run
          sed -i '/backend "azurerm" {/,/}/d' main.tf
          terraform init -upgrade -input=false
          echo "Terraform init completed successfully"
      - name: Terraform Init (Remote State)
        if: steps.check-storage.outputs.exists == 'true'
        working-directory: backend-bootstrap
        timeout-minutes: 10
        run: |
          echo "Starting terraform init with remote state..."
          terraform init -upgrade \
            -backend-config="resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP || 'jit-se-testing-aks-tfstate-rg01' }}" \
            -backend-config="storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT || 'akstfstate01' }}" \
            -backend-config="container_name=${{ secrets.BACKEND_CONTAINER || 'tfstate' }}" \
            -backend-config="key=backend-bootstrap.tfstate"
          echo "Terraform init with remote state completed successfully"
      - name: Select workspace
        working-directory: backend-bootstrap
        run: terraform workspace select default || terraform workspace new default
      - name: Terraform Apply
        working-directory: backend-bootstrap
        run: terraform apply -auto-approve 