name: AKS On-Demand Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform (apply/destroy)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  aks-terraform:
    runs-on: ubuntu-latest
    env:
      TFSTATE_KEY: "aks01-public.terraform.tfstate"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init (with remote backend)
        #working-directory: az-tf-aks
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=$TFSTATE_KEY"
      - name: Terraform Plan
       #working-directory: az-tf-aks
        run: terraform plan
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        #working-directory: az-tf-aks
        run: terraform apply -auto-approve
      - name: Print kubeconfig
        if: github.event.inputs.action == 'apply'
        #working-directory: az-tf-aks
        run: |
          echo "Kubeconfig output:"
          terraform output kube_config
      - name: Print public IP
        if: github.event.inputs.action == 'apply'
        #working-directory: az-tf-aks
        run: |
          echo "Public IP address:"
          terraform output aks_public_ip
      - name: Get AKS credentials and check public IP
        if: github.event.inputs.action == 'apply'
        run: |
          # Get AKS credentials
          az aks get-credentials --resource-group $(terraform -chdir=az-tf-aks output -raw resource_group_name) --name $(terraform -chdir=az-tf-aks output -raw aks_cluster_name) --overwrite-existing
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        #working-directory: az-tf-aks
        run: terraform destroy -auto-approve
 